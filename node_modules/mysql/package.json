{
  "author": {
    "name": "Felix Geisend√∂rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "name": "mysql",
  "description": "A node.js driver for mysql. It is written in JavaScript, does not require compiling, and is 100% MIT licensed.",
  "version": "2.1.0",
  "homepage": "https://github.com/felixge/node-mysql",
  "repository": {
    "type": "git",
    "url": "https://github.com/felixge/node-mysql"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "require-all": "0.0.3",
    "bignumber.js": "1.0.1",
    "readable-stream": "~1.1.9"
  },
  "devDependencies": {
    "utest": "0.0.6",
    "urun": "0.0.6",
    "underscore": "1.3.1"
  },
  "optionalDependencies": {},
  "readme": "# node-mysql\r\n\r\n[![Build Status](https://secure.travis-ci.org/felixge/node-mysql.png)](http://travis-ci.org/felixge/node-mysql)\r\n\r\n## Install\r\n\r\n```bash\r\nnpm install mysql\r\n```\r\n\r\nFor information about the previous 0.9.x releases, visit the [v0.9 branch][].\r\n\r\nSometimes I may also ask you to install the latest version from Github to check\r\nif a bugfix is working. In this case, please do:\r\n\r\n```\r\nnpm install felixge/node-mysql\r\n```\r\n\r\n[v0.9 branch]: https://github.com/felixge/node-mysql/tree/v0.9\r\n\r\n## Introduction\r\n\r\nThis is a node.js driver for mysql. It is written in JavaScript, does not\r\nrequire compiling, and is 100% MIT licensed.\r\n\r\nHere is an example on how to use it:\r\n\r\n```js\r\nvar mysql      = require('mysql');\r\nvar connection = mysql.createConnection({\r\n  host     : 'localhost',\r\n  user     : 'me',\r\n  password : 'secret'\r\n});\r\n\r\nconnection.connect();\r\n\r\nconnection.query('SELECT 1 + 1 AS solution', function(err, rows, fields) {\r\n  if (err) throw err;\r\n\r\n  console.log('The solution is: ', rows[0].solution);\r\n});\r\n\r\nconnection.end();\r\n```\r\n\r\nFrom this example, you can learn the following:\r\n\r\n* Every method you invoke on a connection is queued and executed in sequence.\r\n* Closing the connection is done using `end()` which makes sure all remaining\r\n  queries are executed before sending a quit packet to the mysql server.\r\n\r\n## Contributors\r\n\r\nThanks goes to the people who have contributed code to this module, see the\r\n[GitHub Contributors page][].\r\n\r\n[GitHub Contributors page]: https://github.com/felixge/node-mysql/graphs/contributors\r\n\r\nAdditionally I'd like to thank the following people:\r\n\r\n* [Andrey Hristov][] (Oracle) - for helping me with protocol questions.\r\n* [Ulf Wendel][] (Oracle) - for helping me with protocol questions.\r\n\r\n[Ulf Wendel]: http://blog.ulf-wendel.de/\r\n[Andrey Hristov]: http://andrey.hristov.com/\r\n\r\n## Sponsors\r\n\r\nThe following companies have supported this project financially, allowing me to\r\nspend more time on it (ordered by time of contribution):\r\n\r\n* [Transloadit](http://transloadit.com) (my startup, we do file uploading &\r\n  video encoding as a service, check it out)\r\n* [Joyent](http://www.joyent.com/)\r\n* [pinkbike.com](http://pinkbike.com/)\r\n* [Holiday Extras](http://www.holidayextras.co.uk/) (they are [hiring](http://join.holidayextras.co.uk/vacancy/software-engineer/))\r\n* [Newscope](http://newscope.com/) (they are [hiring](http://www.newscope.com/stellenangebote))\r\n\r\nIf you are interested in sponsoring a day or more of my time, please\r\n[get in touch][].\r\n\r\n[get in touch]: http://felixge.de/#consulting\r\n\r\n## Community\r\n\r\nIf you'd like to discuss this module, or ask questions about it, please use one\r\nof the following:\r\n\r\n* **Mailing list**: https://groups.google.com/forum/#!forum/node-mysql\r\n* **IRC Channel**: #node.js (on freenode.net, I pay attention to any message\r\n  including the term `mysql`)\r\n\r\n## Establishing connections\r\n\r\nThe recommended way to establish a connection is this:\r\n\r\n```js\r\nvar mysql      = require('mysql');\r\nvar connection = mysql.createConnection({\r\n  host     : 'example.org',\r\n  user     : 'bob',\r\n  password : 'secret'\r\n});\r\n\r\nconnection.connect(function(err) {\r\n  // connected! (unless `err` is set)\r\n});\r\n```\r\n\r\nHowever, a connection can also be implicitly established by invoking a query:\r\n\r\n```js\r\nvar mysql      = require('mysql');\r\nvar connection = mysql.createConnection(...);\r\n\r\nconnection.query('SELECT 1', function(err, rows) {\r\n  // connected! (unless `err` is set)\r\n});\r\n```\r\n\r\nDepending on how you like to handle your errors, either method may be\r\nappropriate. Any type of connection error (handshake or network) is considered\r\na fatal error, see the [Error Handling](#error-handling) section for more\r\ninformation.\r\n\r\n## Connection options\r\n\r\nWhen establishing a connection, you can set the following options:\r\n\r\n* `host`: The hostname of the database you are connecting to. (Default:\r\n  `localhost`)\r\n* `port`: The port number to connect to. (Default: `3306`)\r\n* `localAddress`: The source IP address to use for TCP connection. (Optional)\r\n* `socketPath`: The path to a unix domain socket to connect to. When used `host`\r\n  and `port` are ignored.\r\n* `user`: The MySQL user to authenticate as.\r\n* `password`: The password of that MySQL user.\r\n* `database`: Name of the database to use for this connection (Optional).\r\n* `charset`: The charset for the connection. (Default: `'UTF8_GENERAL_CI'`. Value needs to be all in upper case letters!)\r\n* `timezone`: The timezone used to store local dates. (Default: `'local'`)\r\n* `connectTimeout`: The milliseconds before a timeout occurs during the initial connection\r\n  to the MySQL server. (Default: no timeout)\r\n* `stringifyObjects`: Stringify objects instead of converting to values. See\r\nissue [#501](https://github.com/felixge/node-mysql/issues/501). (Default: `'false'`)\r\n* `insecureAuth`: Allow connecting to MySQL instances that ask for the old\r\n  (insecure) authentication method. (Default: `false`)\r\n* `typeCast`: Determines if column values should be converted to native\r\n   JavaScript types. (Default: `true`)\r\n* `queryFormat`: A custom query format function. See [Custom format](#custom-format).\r\n* `supportBigNumbers`: When dealing with big numbers (BIGINT and DECIMAL columns) in the database,\r\n  you should enable this option (Default: `false`).\r\n* `bigNumberStrings`: Enabling both `supportBigNumbers` and `bigNumberStrings` forces big numbers\r\n  (BIGINT and DECIMAL columns) to be always returned as JavaScript String objects (Default: `false`).\r\n  Enabling `supportBigNumbers` but leaving `bigNumberStrings` disabled will return big numbers as String\r\n  objects only when they cannot be accurately represented with [JavaScript Number objects] (http://ecma262-5.com/ELS5_HTML.htm#Section_8.5)\r\n  (which happens when they exceed the [-2^53, +2^53] range), otherwise they will be returned as\r\n  Number objects. This option is ignored if `supportBigNumbers` is disabled.\r\n* `dateStrings`: Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather then\r\n   inflated into JavaScript Date objects. (Default: `false`)\r\n* `debug`: Prints protocol details to stdout. (Default: `false`)\r\n* `trace`: Generates stack traces on `Error` to include call site of library\r\n   entrance (\"long stack traces\"). Slight performance penalty for most calls.\r\n   (Default: `true`)\r\n* `multipleStatements`: Allow multiple mysql statements per query. Be careful\r\n  with this, it exposes you to SQL injection attacks. (Default: `false`)\r\n* `flags`: List of connection flags to use other than the default ones. It is\r\n  also possible to blacklist default ones. For more information, check [Connection Flags](#connection-flags).\r\n* `ssl`: object with ssl parameters ( same format as [crypto.createCredentials](http://nodejs.org/api/crypto.html#crypto_crypto_createcredentials_details) argument ) \r\n  or a string containing name of ssl profile. Currently only 'Amazon RDS' profile is bundled, containing CA from https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem\r\n\r\n\r\nIn addition to passing these options as an object, you can also use a url\r\nstring. For example:\r\n\r\n```js\r\nvar connection = mysql.createConnection('mysql://user:pass@host/db?debug=true&charset=BIG5_CHINESE_CI&timezone=-0700');\r\n```\r\n\r\nNote: The query values are first attempted to be parsed as JSON, and if that\r\nfails assumed to be plaintext strings.\r\n\r\n## Terminating connections\r\n\r\nThere are two ways to end a connection. Terminating a connection gracefully is\r\ndone by calling the `end()` method:\r\n\r\n```js\r\nconnection.end(function(err) {\r\n  // The connection is terminated now\r\n});\r\n```\r\n\r\nThis will make sure all previously enqueued queries are still before sending a\r\n`COM_QUIT` packet to the MySQL server. If a fatal error occurs before the\r\n`COM_QUIT` packet can be sent, an `err` argument will be provided to the\r\ncallback, but the connection will be terminated regardless of that.\r\n\r\nAn alternative way to end the connection is to call the `destroy()` method.\r\nThis will cause an immediate termination of the underlying socket.\r\nAdditionally `destroy()` guarantees that no more events or callbacks will be\r\ntriggered for the connection.\r\n\r\n```js\r\nconnection.destroy();\r\n```\r\n\r\nUnlike `end()` the `destroy()` method does not take a callback argument.\r\n\r\n## Pooling connections\r\n\r\nConnections can be pooled to ease sharing a single connection, or managing\r\nmultiple connections.\r\n\r\n```js\r\nvar mysql = require('mysql');\r\nvar pool  = mysql.createPool({\r\n  host     : 'example.org',\r\n  user     : 'bob',\r\n  password : 'secret'\r\n});\r\n\r\npool.getConnection(function(err, connection) {\r\n  // connected! (unless `err` is set)\r\n});\r\n```\r\n\r\nIf you need to set session variables on the connection before it gets used,\r\nyou can listen to the `connection` event.\r\n\r\n```js\r\npool.on('connection', function(connection) {\r\n  connection.query('SET SESSION auto_increment_increment=1')\r\n});\r\n```\r\n\r\nWhen you are done with a connection, just call `connection.release()` and the\r\nconnection will return to the pool, ready to be used again by someone else.\r\n\r\n```js\r\nvar mysql = require('mysql');\r\nvar pool  = mysql.createPool(...);\r\n\r\npool.getConnection(function(err, connection) {\r\n  // Use the connection\r\n  connection.query( 'SELECT something FROM sometable', function(err, rows) {\r\n    // And done with the connection.\r\n    connection.release();\r\n\r\n    // Don't use the connection here, it has been returned to the pool.\r\n  });\r\n});\r\n```\r\n\r\nIf you would like to close the connection and remove it from the pool, use\r\n`connection.destroy()` instead. The pool will create a new connection the next\r\ntime one is needed.\r\n\r\nConnections are lazily created by the pool. If you configure the pool to allow\r\nup to 100 connections, but only ever use 5 simultaneously, only 5 connections\r\nwill be made. Connections are also cycled round-robin style, with connections\r\nbeing taken from the top of the pool and returning to the bottom.\r\n\r\n## Pool options\r\n\r\nPools accept all the same options as a connection. When creating a new\r\nconnection, the options are simply passed to the connection constructor. In\r\naddition to those options pools accept a few extras:\r\n\r\n* `waitForConnections`: Determines the pool's action when no connections are\r\n  available and the limit has been reached. If `true`, the pool will queue the\r\n  connection request and call it when one becomes available. If `false`, the\r\n  pool will immediately call back with an error. (Default: `true`)\r\n* `connectionLimit`: The maximum number of connections to create at once.\r\n  (Default: `10`)\r\n* `queueLimit`: The maximum number of connection requests the pool will queue\r\n  before returning an error from `getConnection`. If set to `0`, there is no\r\n  limit to the number of queued connection requests. (Default: `0`)\r\n\r\n## PoolCluster\r\n\r\nPoolCluster provides multiple hosts connection. (group & retry & selector)\r\n\r\n```js\r\n// create\r\nvar poolCluster = mysql.createPoolCluster();\r\n\r\npoolCluster.add(config); // anonymous group\r\npoolCluster.add('MASTER', masterConfig);\r\npoolCluster.add('SLAVE1', slave1Config);\r\npoolCluster.add('SLAVE2', slave2Config);\r\n\r\n// Target Group : ALL(anonymous, MASTER, SLAVE1-2), Selector : round-robin(default)\r\npoolCluster.getConnection(function (err, connection) {});\r\n\r\n// Target Group : MASTER, Selector : round-robin\r\npoolCluster.getConnection('MASTER', function (err, connection) {});\r\n\r\n// Target Group : SLAVE1-2, Selector : order\r\n// If can't connect to SLAVE1, return SLAVE2. (remove SLAVE1 in the cluster)\r\npoolCluster.on('remove', function (nodeId) {\r\n  console.log('REMOVED NODE : ' + nodeId); // nodeId = SLAVE1 \r\n});\r\n\r\npoolCluster.getConnection('SLAVE*', 'ORDER', function (err, connection) {});\r\n\r\n// of namespace : of(pattern, selector)\r\npoolCluster.of('*').getConnection(function (err, connection) {});\r\n\r\nvar pool = poolCluster.of('SLAVE*', 'RANDOM');\r\npool.getConnection(function (err, connection) {});\r\npool.getConnection(function (err, connection) {});\r\n\r\n// destroy\r\npoolCluster.end();\r\n```\r\n\r\n## PoolCluster Option\r\n* `canRetry`: If `true`, `PoolCluster` will attempt to reconnect when connection fails. (Default: `true`)\r\n* `removeNodeErrorCount`: If connection fails, node's `errorCount` increases. \r\n  When `errorCount` is greater than `removeNodeErrorCount`, remove a node in the `PoolCluster`. (Default: `5`)\r\n* `defaultSelector`: The default selector. (Default: `RR`)\r\n  * `RR`: Select one alternately. (Round-Robin)\r\n  * `RANDOM`: Select the node by random function.\r\n  * `ORDER`: Select the first node available unconditionally.\r\n\r\n```js\r\nvar clusterConfig = {\r\n  removeNodeErrorCount: 1, // Remove the node immediately when connection fails.\r\n  defaultSelector: 'ORDER'\r\n};\r\n\r\nvar poolCluster = mysql.createPoolCluster(clusterConfig);\r\n```\r\n\r\n## Switching users / altering connection state\r\n\r\nMySQL offers a changeUser command that allows you to alter the current user and\r\nother aspects of the connection without shutting down the underlying socket:\r\n\r\n```js\r\nconnection.changeUser({user : 'john'}, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\nThe available options for this feature are:\r\n\r\n* `user`: The name of the new user (defaults to the previous one).\r\n* `password`: The password of the new user (defaults to the previous one).\r\n* `charset`: The new charset (defaults to the previous one).\r\n* `database`: The new database (defaults to the previous one).\r\n\r\nA sometimes useful side effect of this functionality is that this function also\r\nresets any connection state (variables, transactions, etc.).\r\n\r\nErrors encountered during this operation are treated as fatal connection errors\r\nby this module.\r\n\r\n## Server disconnects\r\n\r\nYou may lose the connection to a MySQL server due to network problems, the\r\nserver timing you out, the server being restarted, or crashing. All of these\r\nevents are considered fatal errors, and will have the `err.code =\r\n'PROTOCOL_CONNECTION_LOST'`.  See the [Error Handling](#error-handling) section\r\nfor more information.\r\n\r\nA good way to handle such unexpected disconnects is shown below:\r\n\r\n```js\r\nvar db_config = {\r\n  host: 'localhost',\r\n\tuser: 'root',\r\n\tpassword: '',\r\n\tdatabase: 'example'\r\n};\r\n\r\nvar connection;\r\n\r\nfunction handleDisconnect() {\r\n  connection = mysql.createConnection(db_config); // Recreate the connection, since\r\n                                                  // the old one cannot be reused.\r\n\r\n  connection.connect(function(err) {              // The server is either down\r\n    if(err) {                                     // or restarting (takes a while sometimes).\r\n      console.log('error when connecting to db:', err);\r\n      setTimeout(handleDisconnect, 2000); // We introduce a delay before attempting to reconnect,\r\n    }                                     // to avoid a hot loop, and to allow our node script to\r\n  });                                     // process asynchronous requests in the meantime.\r\n                                          // If you're also serving http, display a 503 error.\r\n  connection.on('error', function(err) {\r\n    console.log('db error', err);\r\n    if(err.code === 'PROTOCOL_CONNECTION_LOST') { // Connection to the MySQL server is usually\r\n      handleDisconnect();                         // lost due to either server restart, or a\r\n    } else {                                      // connnection idle timeout (the wait_timeout\r\n      throw err;                                  // server variable configures this)\r\n    }\r\n  });\r\n}\r\n\r\nhandleDisconnect();\r\n```\r\n\r\nAs you can see in the example above, re-connecting a connection is done by\r\nestablishing a new connection. Once terminated, an existing connection object\r\ncannot be re-connected by design.\r\n\r\nWith Pool, disconnected connections will be removed from the pool freeing up\r\nspace for a new connection to be created on the next getConnection call.\r\n\r\n## Escaping query values\r\n\r\nIn order to avoid SQL Injection attacks, you should always escape any user\r\nprovided data before using it inside a SQL query. You can do so using the\r\n`connection.escape()` or `pool.escape()` methods:\r\n\r\n```js\r\nvar userId = 'some user provided value';\r\nvar sql    = 'SELECT * FROM users WHERE id = ' + connection.escape(userId);\r\nconnection.query(sql, function(err, results) {\r\n  // ...\r\n});\r\n```\r\n\r\nAlternatively, you can use `?` characters as placeholders for values you would\r\nlike to have escaped like this:\r\n\r\n```js\r\nconnection.query('SELECT * FROM users WHERE id = ?', [userId], function(err, results) {\r\n  // ...\r\n});\r\n```\r\n\r\nThis looks similar to prepared statements in MySQL, however it really just uses\r\nthe same `connection.escape()` method internally.\r\n\r\nDifferent value types are escaped differently, here is how:\r\n\r\n* Numbers are left untouched\r\n* Booleans are converted to `true` / `false` strings\r\n* Date objects are converted to `'YYYY-mm-dd HH:ii:ss'` strings\r\n* Buffers are converted to hex strings, e.g. `X'0fa5'`\r\n* Strings are safely escaped\r\n* Arrays are turned into list, e.g. `['a', 'b']` turns into `'a', 'b'`\r\n* Nested arrays are turned into grouped lists (for bulk inserts), e.g. `[['a',\r\n  'b'], ['c', 'd']]` turns into `('a', 'b'), ('c', 'd')`\r\n* Objects are turned into `key = 'val'` pairs. Nested objects are cast to\r\n  strings.\r\n* `undefined` / `null` are converted to `NULL`\r\n* `NaN` / `Infinity` are left as-is. MySQL does not support these, and trying\r\n  to insert them as values will trigger MySQL errors until they implement\r\n  support.\r\n\r\nIf you paid attention, you may have noticed that this escaping allows you\r\nto do neat things like this:\r\n\r\n```js\r\nvar post  = {id: 1, title: 'Hello MySQL'};\r\nvar query = connection.query('INSERT INTO posts SET ?', post, function(err, result) {\r\n  // Neat!\r\n});\r\nconsole.log(query.sql); // INSERT INTO posts SET `id` = 1, `title` = 'Hello MySQL'\r\n\r\n```\r\n\r\nIf you feel the need to escape queries by yourself, you can also use the escaping\r\nfunction directly:\r\n\r\n```js\r\nvar query = \"SELECT * FROM posts WHERE title=\" + mysql.escape(\"Hello MySQL\");\r\n\r\nconsole.log(query); // SELECT * FROM posts WHERE title='Hello MySQL'\r\n```\r\n\r\n## Escaping query identifiers\r\n\r\nIf you can't trust an SQL identifier (database / table / column name) because it is\r\nprovided by a user, you should escape it with `mysql.escapeId(identifier)` like this:\r\n\r\n```js\r\nvar sorter = 'date';\r\nvar query = 'SELECT * FROM posts ORDER BY ' + mysql.escapeId(sorter);\r\n\r\nconsole.log(query); // SELECT * FROM posts ORDER BY `date`\r\n```\r\n\r\nIt also supports adding qualified identifiers. It will escape both parts.\r\n\r\n```js\r\nvar sorter = 'date';\r\nvar query = 'SELECT * FROM posts ORDER BY ' + mysql.escapeId('posts.' + sorter);\r\n\r\nconsole.log(query); // SELECT * FROM posts ORDER BY `posts`.`date`\r\n```\r\n\r\nAlternatively, you can use `??` characters as placeholders for identifiers you would\r\nlike to have escaped like this:\r\n\r\n```js\r\nvar userId = 1;\r\nvar columns = ['username', 'email'];\r\nvar query = connection.query('SELECT ?? FROM ?? WHERE id = ?', [columns, 'users', userId], function(err, results) {\r\n  // ...\r\n});\r\n\r\nconsole.log(query.sql); // SELECT `username`, `email` FROM `users` WHERE id = 1\r\n```\r\n**Please note that this last character sequence is experimental and syntax might change**\r\n\r\nWhen you pass an Object to `.escape()` or `.query()`, `.escapeId()` is used to avoid SQL injection in object keys.\r\n\r\n### Preparing Queries\r\n\r\nYou can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:\r\n\r\n```js\r\nvar sql = \"SELECT * FROM ?? WHERE ?? = ?\";\r\nvar inserts = ['users', 'id', userId];\r\nsql = mysql.format(sql, inserts);\r\n```\r\n\r\nFollowing this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As mysql.format is exposed from SqlString.format you also have the option (but are not required) to pass in stringifyObject and timezone, allowing you provide a custom means of turning objects into strings, as well as a location-specific/timezone-aware Date.\r\n\r\n### Custom format\r\n\r\nIf you prefer to have another type of query escape format, there's a connection configuration option you can use to define a custom format function. You can access the connection object if you want to use the built-in `.escape()` or any other connection function.\r\n\r\nHere's an example of how to implement another format:\r\n\r\n```js\r\nconnection.config.queryFormat = function (query, values) {\r\n  if (!values) return query;\r\n  return query.replace(/\\:(\\w+)/g, function (txt, key) {\r\n    if (values.hasOwnProperty(key)) {\r\n      return this.escape(values[key]);\r\n    }\r\n    return txt;\r\n  }.bind(this));\r\n};\r\n\r\nconnection.query(\"UPDATE posts SET title = :title\", { title: \"Hello MySQL\" });\r\n```\r\n\r\n## Getting the id of an inserted row\r\n\r\nIf you are inserting a row into a table with an auto increment primary key, you\r\ncan retrieve the insert id like this:\r\n\r\n```js\r\nconnection.query('INSERT INTO posts SET ?', {title: 'test'}, function(err, result) {\r\n  if (err) throw err;\r\n\r\n  console.log(result.insertId);\r\n});\r\n```\r\n\r\nWhen dealing with big numbers (above JavaScript Number precision limit), you should\r\nconsider enabling `supportBigNumbers` option to be able to read the insert id as a\r\nstring, otherwise it will throw.\r\n\r\nThis option is also required when fetching big numbers from the database, otherwise\r\nyou will get values rounded to hundreds or thousands due to the precision limit.\r\n\r\n## Executing queries in parallel\r\n\r\nThe MySQL protocol is sequential, this means that you need multiple connections\r\nto execute queries in parallel. You can use a Pool to manage connections, one\r\nsimple approach is to create one connection per incoming http request.\r\n\r\n## Streaming query rows\r\n\r\nSometimes you may want to select large quantities of rows and process each of\r\nthem as they are received. This can be done like this:\r\n\r\n```js\r\nvar query = connection.query('SELECT * FROM posts');\r\nquery\r\n  .on('error', function(err) {\r\n    // Handle error, an 'end' event will be emitted after this as well\r\n  })\r\n  .on('fields', function(fields) {\r\n    // the field packets for the rows to follow\r\n  })\r\n  .on('result', function(row) {\r\n    // Pausing the connnection is useful if your processing involves I/O\r\n    connection.pause();\r\n\r\n    processRow(row, function() {\r\n      connection.resume();\r\n    });\r\n  })\r\n  .on('end', function() {\r\n    // all rows have been received\r\n  });\r\n```\r\n\r\nPlease note a few things about the example above:\r\n\r\n* Usually you will want to receive a certain amount of rows before starting to\r\n  throttle the connection using `pause()`. This number will depend on the\r\n  amount and size of your rows.\r\n* `pause()` / `resume()` operate on the underlying socket and parser. You are\r\n  guaranteed that no more `'result'` events will fire after calling `pause()`.\r\n* You MUST NOT provide a callback to the `query()` method when streaming rows.\r\n* The `'result'` event will fire for both rows as well as OK packets\r\n  confirming the success of a INSERT/UPDATE query.\r\n\r\nAdditionally you may be interested to know that it is currently not possible to\r\nstream individual row columns, they will always be buffered up entirely. If you\r\nhave a good use case for streaming large fields to and from MySQL, I'd love to\r\nget your thoughts and contributions on this.\r\n\r\n### Piping results with [Streams2](http://blog.nodejs.org/2012/12/20/streams2/)\r\n\r\nThe query object provides a convenience method `.stream([options])` that wraps\r\nquery events into a [Readable](http://nodejs.org/api/stream.html#stream_class_stream_readable)\r\nStreams2 object.  This stream can easily be piped downstream and provides\r\nautomatic pause/resume, based on downstream congestion and the optional\r\n`highWaterMark`. The `objectMode` parameter of the stream is set to `true` by\r\ndefault.\r\n\r\nFor example, piping query results into another stream (with a max buffer of 5\r\nobjects) is simply:\r\n\r\n```js\r\nconnection.query('SELECT * FROM posts')\r\n  .stream({highWaterMark: 5})\r\n  .pipe(...);\r\n```\r\n\r\n## Multiple statement queries\r\n\r\nSupport for multiple statements is disabled for security reasons (it allows for\r\nSQL injection attacks if values are not properly escaped). To use this feature\r\nyou have to enable it for your connection:\r\n\r\n```js\r\nvar connection = mysql.createConnection({multipleStatements: true});\r\n```\r\n\r\nOnce enabled, you can execute multiple statement queries like any other query:\r\n\r\n```js\r\nconnection.query('SELECT 1; SELECT 2', function(err, results) {\r\n  if (err) throw err;\r\n\r\n  // `results` is an array with one element for every statement in the query:\r\n  console.log(results[0]); // [{1: 1}]\r\n  console.log(results[1]); // [{2: 2}]\r\n});\r\n```\r\n\r\nAdditionally you can also stream the results of multiple statement queries:\r\n\r\n```js\r\nvar query = connection.query('SELECT 1; SELECT 2');\r\n\r\nquery\r\n  .on('fields', function(fields, index) {\r\n    // the fields for the result rows that follow\r\n  })\r\n  .on('result', function(row, index) {\r\n    // index refers to the statement this result belongs to (starts at 0)\r\n  });\r\n```\r\n\r\nIf one of the statements in your query causes an error, the resulting Error\r\nobject contains a `err.index` property which tells you which statement caused\r\nit. MySQL will also stop executing any remaining statements when an error\r\noccurs.\r\n\r\nPlease note that the interface for streaming multiple statement queries is\r\nexperimental and I am looking forward to feedback on it.\r\n\r\n## Stored procedures\r\n\r\nYou can call stored procedures from your queries as with any other mysql driver.\r\nIf the stored procedure produces several result sets, they are exposed to you\r\nthe same way as the results for multiple statement queries.\r\n\r\n## Joins with overlapping column names\r\n\r\nWhen executing joins, you are likely to get result sets with overlapping column\r\nnames.\r\n\r\nBy default, node-mysql will overwrite colliding column names in the\r\norder the columns are received from MySQL, causing some of the received values\r\nto be unavailable.\r\n\r\nHowever, you can also specify that you want your columns to be nested below\r\nthe table name like this:\r\n\r\n```js\r\nvar options = {sql: '...', nestTables: true};\r\nconnection.query(options, function(err, results) {\r\n  /* results will be an array like this now:\r\n  [{\r\n    table1: {\r\n      fieldA: '...',\r\n      fieldB: '...',\r\n    },\r\n    table2: {\r\n      fieldA: '...',\r\n      fieldB: '...',\r\n    },\r\n  }, ...]\r\n  */\r\n});\r\n```\r\n\r\nOr use a string separator to have your results merged.\r\n\r\n```js\r\nvar options = {sql: '...', nestTables: '_'};\r\nconnection.query(options, function(err, results) {\r\n  /* results will be an array like this now:\r\n  [{\r\n    table1_fieldA: '...',\r\n    table1_fieldB: '...',\r\n    table2_fieldA: '...',\r\n    table2_fieldB: '...',\r\n  }, ...]\r\n  */\r\n});\r\n```\r\n\r\n## Transactions\r\n\r\nSimple transaction support is available at the connection level:\r\n\r\n```js\r\nconnection.beginTransaction(function(err) {\r\n  if (err) { throw err; }\r\n  connection.query('INSERT INTO posts SET title=?', title, function(err, result) {\r\n    if (err) { \r\n      connection.rollback(function() {\r\n        throw err;\r\n      });\r\n    }\r\n\r\n\tvar log = 'Post ' + result.insertId + ' added';\r\n\r\n\tconnection.query('INSERT INTO log SET data=?', log, function(err, result) {\r\n\t  if (err) { \r\n        connection.rollback(function() {\r\n          throw err;\r\n        });\r\n      }  \r\n\t  connection.commit(function(err) {\r\n\t    if (err) { \r\n          connection.rollback(function() {\r\n            throw err;\r\n          });\r\n        }\r\n\t    console.log('success!');\r\n\t  });\r\n    });\r\n  });\r\n});\r\n```\r\nPlease note that beginTransaction(), commit() and rollback() are simply convenience\r\nfunctions that execute the START TRANSACTION, COMMIT, and ROLLBACK commands respectively.\r\nIt is important to understand that many commands in MySQL can cause an implicit commit,\r\nas described [in the MySQL documentation](http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html)\r\n\r\n## Error handling\r\n\r\nThis module comes with a consistent approach to error handling that you should\r\nreview carefully in order to write solid applications.\r\n\r\nAll errors created by this module are instances of the JavaScript [Error][]\r\nobject. Additionally they come with two properties:\r\n\r\n* `err.code`: Either a [MySQL server error][] (e.g.\r\n  `'ER_ACCESS_DENIED_ERROR'`), a node.js error (e.g. `'ECONNREFUSED'`) or an\r\n  internal error (e.g.  `'PROTOCOL_CONNECTION_LOST'`).\r\n* `err.fatal`: Boolean, indicating if this error is terminal to the connection\r\n  object.\r\n\r\n[Error]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\r\n[MySQL server error]: http://dev.mysql.com/doc/refman/5.5/en/error-messages-server.html\r\n\r\nFatal errors are propagated to *all* pending callbacks. In the example below, a\r\nfatal error is triggered by trying to connect to an invalid port. Therefore the\r\nerror object is propagated to both pending callbacks:\r\n\r\n```js\r\nvar connection = require('mysql').createConnection({\r\n  port: 84943, // WRONG PORT\r\n});\r\n\r\nconnection.connect(function(err) {\r\n  console.log(err.code); // 'ECONNREFUSED'\r\n  console.log(err.fatal); // true\r\n});\r\n\r\nconnection.query('SELECT 1', function(err) {\r\n  console.log(err.code); // 'ECONNREFUSED'\r\n  console.log(err.fatal); // true\r\n});\r\n```\r\n\r\nNormal errors however are only delegated to the callback they belong to.  So in\r\nthe example below, only the first callback receives an error, the second query\r\nworks as expected:\r\n\r\n```js\r\nconnection.query('USE name_of_db_that_does_not_exist', function(err, rows) {\r\n  console.log(err.code); // 'ER_BAD_DB_ERROR'\r\n});\r\n\r\nconnection.query('SELECT 1', function(err, rows) {\r\n  console.log(err); // null\r\n  console.log(rows.length); // 1\r\n});\r\n```\r\n\r\nLast but not least: If a fatal errors occurs and there are no pending\r\ncallbacks, or a normal error occurs which has no callback belonging to it, the\r\nerror is emitted as an `'error'` event on the connection object. This is\r\ndemonstrated in the example below:\r\n\r\n```js\r\nconnection.on('error', function(err) {\r\n  console.log(err.code); // 'ER_BAD_DB_ERROR'\r\n});\r\n\r\nconnection.query('USE name_of_db_that_does_not_exist');\r\n```\r\n\r\nNote: `'error'` are special in node. If they occur without an attached\r\nlistener, a stack trace is printed and your process is killed.\r\n\r\n**tl;dr:** This module does not want you to deal with silent failures. You\r\nshould always provide callbacks to your method calls. If you want to ignore\r\nthis advice and suppress unhandled errors, you can do this:\r\n\r\n```js\r\n// I am Chuck Norris:\r\nconnection.on('error', function() {});\r\n```\r\n\r\n## Exception Safety\r\n\r\nThis module is exception safe. That means you can continue to use it, even if\r\none of your callback functions throws an error which you're catching using\r\n'uncaughtException' or a domain.\r\n\r\n## Type casting\r\n\r\nFor your convenience, this driver will cast mysql types into native JavaScript\r\ntypes by default. The following mappings exist:\r\n\r\n### Number\r\n\r\n* TINYINT\r\n* SMALLINT\r\n* INT\r\n* MEDIUMINT\r\n* YEAR\r\n* FLOAT\r\n* DOUBLE\r\n\r\n### Date\r\n\r\n* TIMESTAMP\r\n* DATE\r\n* DATETIME\r\n\r\n### Buffer\r\n\r\n* TINYBLOB\r\n* MEDIUMBLOB\r\n* LONGBLOB\r\n* BLOB\r\n* BINARY\r\n* VARBINARY\r\n* BIT (last byte will be filled with 0 bits as necessary)\r\n\r\n### String\r\n\r\n* CHAR\r\n* VARCHAR\r\n* TINYTEXT\r\n* MEDIUMTEXT\r\n* LONGTEXT\r\n* TEXT\r\n* ENUM\r\n* SET\r\n* DECIMAL (may exceed float precision)\r\n* BIGINT (may exceed float precision)\r\n* TIME (could be mapped to Date, but what date would be set?)\r\n* GEOMETRY (never used those, get in touch if you do)\r\n\r\nIt is not recommended (and may go away / change in the future) to disable type\r\ncasting, but you can currently do so on either the connection:\r\n\r\n```js\r\nvar connection = require('mysql').createConnection({typeCast: false});\r\n```\r\n\r\nOr on the query level:\r\n\r\n```js\r\nvar options = {sql: '...', typeCast: false};\r\nvar query = connection.query(options, function(err, results) {\r\n\r\n});\r\n```\r\n\r\nYou can also pass a function and handle type casting yourself. You're given some\r\ncolumn information like database, table and name and also type and length. If you\r\njust want to apply a custom type casting to a specific type you can do it and then\r\nfallback to the default. Here's an example of converting `TINYINT(1)` to boolean:\r\n\r\n```js\r\nconnection.query({\r\n  sql: '...',\r\n  typeCast: function (field, next) {\r\n    if (field.type == 'TINY' && field.length == 1) {\r\n      return (field.string() == '1'); // 1 = true, 0 = false\r\n    }\r\n    return next();\r\n  }\r\n});\r\n```\r\n__WARNING: YOU MUST INVOKE the parser using one of these three field functions in your custom typeCast callback. They can only be called once.( see #539 for discussion)__\r\n\r\n```\r\nfield.string()\r\nfield.buffer()\r\nfield.geometry()\r\n```\r\nare aliases for\r\n```\r\nparser.parseLengthCodedString()\r\nparser.parseLengthCodedBuffer()\r\nparser.parseGeometryValue()\r\n```\r\n__You can find which field function you need to use by looking at: [RowDataPacket.prototype._typeCast](https://github.com/felixge/node-mysql/blob/master/lib/protocol/packets/RowDataPacket.js#L41)__\r\n\r\n\r\n## Connection Flags\r\n\r\nIf, for any reason, you would like to change the default connection flags, you\r\ncan use the connection option `flags`. Pass a string with a comma separated list\r\nof items to add to the default flags. If you don't want a default flag to be used\r\nprepend the flag with a minus sign. To add a flag that is not in the default list, don't prepend it with a plus sign, just write the flag name (case insensitive).\r\n\r\n**Please note that some available flags that are not default are still not supported\r\n(e.g.: SSL, Compression). Use at your own risk.**\r\n\r\n### Example\r\n\r\nThe next example blacklists FOUND_ROWS flag from default connection flags.\r\n\r\n```js\r\nvar connection = mysql.createConnection(\"mysql://localhost/test?flags=-FOUND_ROWS\");\r\n```\r\n\r\n### Default Flags\r\n\r\n- LONG_PASSWORD\r\n- FOUND_ROWS\r\n- LONG_FLAG\r\n- CONNECT_WITH_DB\r\n- ODBC\r\n- LOCAL_FILES\r\n- IGNORE_SPACE\r\n- PROTOCOL_41\r\n- IGNORE_SIGPIPE\r\n- TRANSACTIONS\r\n- RESERVED\r\n- SECURE_CONNECTION\r\n- MULTI_RESULTS\r\n- MULTI_STATEMENTS (used if `multipleStatements` option is activated)\r\n\r\n### Other Available Flags\r\n\r\n- NO_SCHEMA\r\n- COMPRESS\r\n- INTERACTIVE\r\n- SSL\r\n- PS_MULTI_RESULTS\r\n- PLUGIN_AUTH\r\n- SSL_VERIFY_SERVER_CERT\r\n- REMEMBER_OPTIONS\r\n\r\n## Debugging and reporting problems\r\n\r\nIf you are running into problems, one thing that may help is enabling the\r\n`debug` mode for the connection:\r\n\r\n```js\r\nvar connection = mysql.createConnection({debug: true});\r\n```\r\n\r\nThis will print all incoming and outgoing packets on stdout. You can also restrict debugging to\r\npacket types by passing an array of types to debug:\r\n\r\n```js\r\nvar connection = mysql.createConnection({debug: ['ComQueryPacket', 'RowDataPacket']});\r\n```\r\n\r\nto restrict debugging to the query and data packets.\r\n\r\nIf that does not help, feel free to open a GitHub issue. A good GitHub issue\r\nwill have:\r\n\r\n* The minimal amount of code required to reproduce the problem (if possible)\r\n* As much debugging output and information about your environment (mysql\r\n  version, node version, os, etc.) as you can gather.\r\n\r\n## Running unit tests\r\n\r\nSet the environment variables `MYSQL_DATABASE`, `MYSQL_HOST`, `MYSQL_PORT`, `MYSQL_USER` and `MYSQL_PASSWORD`. (You may want to put these in a `config.sh` file and source it when you run the tests). Then run `make test`.\r\n\r\nFor example, if you have an installation of mysql running on localhost:3306 and no password set for the `root` user, run:\r\n\r\n```\r\n  mysql -u root -e \"CREATE DATABASE IF NOT EXISTS node_mysql_test\"\r\n  MYSQL_HOST=localhost MYSQL_PORT=3306 MYSQL_DATABASE=node_mysql_test MYSQL_USER=root MYSQL_PASSWORD= make test\r\n```\r\n\r\n## Running unit tests on windows\r\n\r\n* Edit the variables in the file ```make.bat```  according to your system and mysql-settings.\r\n* Make sure the database (e.g. 'test') you want to use exists and the user you entered has the proper rights to use the test database. (E.g. do not forget to execute the SQL-command ```FLUSH PRIVILEGES``` after you have created the user.)\r\n* In a DOS-box (or CMD-shell) in the folder of your application run ```npm install mysql --dev``` or in the mysql folder (```node_modules\\mysql```), run ```npm install --dev```. (This will install additional developer-dependencies for node-mysql.)\r\n* Run ```npm test mysql``` in your applications folder or ```npm test``` in the mysql subfolder.\r\n* If you want to log the output into a file use ```npm test mysql > test.log``` or ```npm test > test.log```.\r\n\r\n## Todo\r\n\r\n* Prepared statements\r\n* setTimeout() for Connection / Query\r\n* Support for encodings other than UTF-8 / ASCII\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/felixge/node-mysql/issues"
  },
  "_id": "mysql@2.1.0",
  "_from": "mysql@>= 1.0.x"
}
